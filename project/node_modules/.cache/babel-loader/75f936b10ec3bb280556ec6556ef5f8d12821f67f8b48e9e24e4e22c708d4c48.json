{"ast":null,"code":"// import axios from 'axios';\n\n// const API_KEY = '';  // Замените на ваш действительный ключ\n// const API_URL = 'https://www.googleapis.com/books/v1/volumes';\n\n// export const fetchBooks = async (query, category, sort, startIndex) => {\n//   try {\n//     const params = {\n//       q: query,\n//       orderBy: sort,\n//       startIndex: startIndex,\n//       maxResults: 30,\n//       key: API_KEY,\n//     };\n\n//     if (category !== 'all') {\n//       params.filter = category;\n//     }\n\n//     const response = await axios.get(API_URL, { params });\n//     return response.data;\n//   } catch (error) {\n//     console.error('Ошибка при загрузке данных с Google Books API:', error);\n//     throw new Error('Не удалось загрузить книги');\n//   }\n// };\n// src/utils/api.js\n\nimport axios from 'axios';\nconst API_KEY = 'AIzaSyB-PJvJSqibUZMXVWLz6OYxN6LVXS170hI'; // Замените на ваш действительный ключ\nconst API_URL = 'https://www.googleapis.com/books/v1/volumes';\nexport const fetchBooks = async (query, category, sort, startIndex) => {\n  try {\n    // Логируем параметры запроса\n    console.log('Запрос к API:', {\n      q: query,\n      orderBy: sort,\n      startIndex: startIndex,\n      maxResults: 30,\n      key: API_KEY,\n      filter: category !== 'all' ? category : undefined // Не передаем filter, если категория 'all'\n    });\n    const params = {\n      q: query,\n      orderBy: sort,\n      startIndex: startIndex,\n      maxResults: 30,\n      key: API_KEY\n    };\n    if (category !== 'all') {\n      params.filter = category; // Добавляем filter, если категория не 'all'\n    }\n    const response = await axios.get(API_URL, {\n      params\n    });\n\n    // Логируем успешный ответ\n    console.log('Ответ от API:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Ошибка при загрузке данных с Google Books API:', error);\n\n    // Логируем ошибку\n    if (error.response) {\n      console.error('Ответ от сервера с ошибкой:', error.response.data);\n    } else {\n      console.error('Ошибка без ответа от сервера:', error.message);\n    }\n    throw new Error('Не удалось загрузить книги');\n  }\n};","map":{"version":3,"names":["axios","API_KEY","API_URL","fetchBooks","query","category","sort","startIndex","console","log","q","orderBy","maxResults","key","filter","undefined","params","response","get","data","error","message","Error"],"sources":["D:/LABS/5-semestr(and_variant)/Veb/src/MODSEN/books-search/src/utils/api.js"],"sourcesContent":["// import axios from 'axios';\r\n\r\n// const API_KEY = '';  // Замените на ваш действительный ключ\r\n// const API_URL = 'https://www.googleapis.com/books/v1/volumes';\r\n\r\n// export const fetchBooks = async (query, category, sort, startIndex) => {\r\n//   try {\r\n//     const params = {\r\n//       q: query,\r\n//       orderBy: sort,\r\n//       startIndex: startIndex,\r\n//       maxResults: 30,\r\n//       key: API_KEY,\r\n//     };\r\n\r\n//     if (category !== 'all') {\r\n//       params.filter = category;\r\n//     }\r\n\r\n//     const response = await axios.get(API_URL, { params });\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error('Ошибка при загрузке данных с Google Books API:', error);\r\n//     throw new Error('Не удалось загрузить книги');\r\n//   }\r\n// };\r\n// src/utils/api.js\r\n\r\nimport axios from 'axios';\r\n\r\nconst API_KEY = 'AIzaSyB-PJvJSqibUZMXVWLz6OYxN6LVXS170hI';  // Замените на ваш действительный ключ\r\nconst API_URL = 'https://www.googleapis.com/books/v1/volumes';\r\n\r\nexport const fetchBooks = async (query, category, sort, startIndex) => {\r\n  try {\r\n    // Логируем параметры запроса\r\n    console.log('Запрос к API:', {\r\n      q: query,\r\n      orderBy: sort,\r\n      startIndex: startIndex,\r\n      maxResults: 30,\r\n      key: API_KEY,\r\n      filter: category !== 'all' ? category : undefined, // Не передаем filter, если категория 'all'\r\n    });\r\n\r\n    const params = {\r\n      q: query,\r\n      orderBy: sort,\r\n      startIndex: startIndex,\r\n      maxResults: 30,\r\n      key: API_KEY,\r\n    };\r\n\r\n    if (category !== 'all') {\r\n      params.filter = category;  // Добавляем filter, если категория не 'all'\r\n    }\r\n\r\n    const response = await axios.get(API_URL, { params });\r\n\r\n    // Логируем успешный ответ\r\n    console.log('Ответ от API:', response.data);\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Ошибка при загрузке данных с Google Books API:', error);\r\n\r\n    // Логируем ошибку\r\n    if (error.response) {\r\n      console.error('Ответ от сервера с ошибкой:', error.response.data);\r\n    } else {\r\n      console.error('Ошибка без ответа от сервера:', error.message);\r\n    }\r\n    throw new Error('Не удалось загрузить книги');\r\n  }\r\n};\r\n\r\n"],"mappings":"AAAA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,yCAAyC,CAAC,CAAE;AAC5D,MAAMC,OAAO,GAAG,6CAA6C;AAE7D,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,UAAU,KAAK;EACrE,IAAI;IACF;IACAC,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE;MAC3BC,CAAC,EAAEN,KAAK;MACRO,OAAO,EAAEL,IAAI;MACbC,UAAU,EAAEA,UAAU;MACtBK,UAAU,EAAE,EAAE;MACdC,GAAG,EAAEZ,OAAO;MACZa,MAAM,EAAET,QAAQ,KAAK,KAAK,GAAGA,QAAQ,GAAGU,SAAS,CAAE;IACrD,CAAC,CAAC;IAEF,MAAMC,MAAM,GAAG;MACbN,CAAC,EAAEN,KAAK;MACRO,OAAO,EAAEL,IAAI;MACbC,UAAU,EAAEA,UAAU;MACtBK,UAAU,EAAE,EAAE;MACdC,GAAG,EAAEZ;IACP,CAAC;IAED,IAAII,QAAQ,KAAK,KAAK,EAAE;MACtBW,MAAM,CAACF,MAAM,GAAGT,QAAQ,CAAC,CAAE;IAC7B;IAEA,MAAMY,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,GAAG,CAAChB,OAAO,EAAE;MAAEc;IAAO,CAAC,CAAC;;IAErD;IACAR,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEQ,QAAQ,CAACE,IAAI,CAAC;IAE3C,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdZ,OAAO,CAACY,KAAK,CAAC,gDAAgD,EAAEA,KAAK,CAAC;;IAEtE;IACA,IAAIA,KAAK,CAACH,QAAQ,EAAE;MAClBT,OAAO,CAACY,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAACH,QAAQ,CAACE,IAAI,CAAC;IACnE,CAAC,MAAM;MACLX,OAAO,CAACY,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAACC,OAAO,CAAC;IAC/D;IACA,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;EAC/C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}