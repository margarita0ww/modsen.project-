{"ast":null,"code":"// src/utils/api.js\n\nimport axios from 'axios';\nconst API_KEY = 'YOUR_GOOGLE_BOOKS_API_KEY'; // Замените на ваш действительный ключ\nconst API_URL = 'https://www.googleapis.com/books/v1/volumes';\n\n/**\r\n * Функция для выполнения запроса к Google Books API.\r\n * \r\n * @param {string} query - Строка поиска.\r\n * @param {string} category - Категория фильтрации.\r\n * @param {string} sort - Параметр сортировки.\r\n * @param {number} startIndex - Индекс для пагинации.\r\n * @returns {Promise<Object>} - Ответ от API.\r\n */\nexport const fetchBooks = async (query, category, sort, startIndex) => {\n  try {\n    console.log(`Запрос: ${API_URL}?q=${query}&orderBy=${sort}&startIndex=${startIndex}&key=${API_KEY}`);\n    const params = {\n      q: query,\n      orderBy: sort,\n      startIndex: startIndex,\n      maxResults: 30,\n      key: API_KEY\n    };\n\n    // Если категория не 'all', добавляем фильтрацию по категории\n    if (category !== 'all') {\n      params.filter = category;\n    }\n    const response = await axios.get(API_URL, {\n      params\n    });\n    console.log('Ответ от API:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Ошибка при загрузке данных с Google Books API:', error);\n    if (error.response) {\n      console.error('Ответ от сервера:', error.response.data);\n    } else {\n      console.error('Ошибка без ответа от сервера:', error.message);\n    }\n    throw new Error('Не удалось загрузить книги');\n  }\n};","map":{"version":3,"names":["axios","API_KEY","API_URL","fetchBooks","query","category","sort","startIndex","console","log","params","q","orderBy","maxResults","key","filter","response","get","data","error","message","Error"],"sources":["D:/LABS/5-semestr(and_variant)/Veb/src/MODSEN/books-search/src/utils/api.js"],"sourcesContent":["// src/utils/api.js\r\n\r\nimport axios from 'axios';\r\n\r\nconst API_KEY = 'YOUR_GOOGLE_BOOKS_API_KEY';  // Замените на ваш действительный ключ\r\nconst API_URL = 'https://www.googleapis.com/books/v1/volumes';\r\n\r\n/**\r\n * Функция для выполнения запроса к Google Books API.\r\n * \r\n * @param {string} query - Строка поиска.\r\n * @param {string} category - Категория фильтрации.\r\n * @param {string} sort - Параметр сортировки.\r\n * @param {number} startIndex - Индекс для пагинации.\r\n * @returns {Promise<Object>} - Ответ от API.\r\n */\r\nexport const fetchBooks = async (query, category, sort, startIndex) => {\r\n  try {\r\n    console.log(`Запрос: ${API_URL}?q=${query}&orderBy=${sort}&startIndex=${startIndex}&key=${API_KEY}`);\r\n\r\n    const params = {\r\n      q: query,\r\n      orderBy: sort,\r\n      startIndex: startIndex,\r\n      maxResults: 30,\r\n      key: API_KEY,\r\n    };\r\n\r\n    // Если категория не 'all', добавляем фильтрацию по категории\r\n    if (category !== 'all') {\r\n      params.filter = category;\r\n    }\r\n\r\n    const response = await axios.get(API_URL, { params });\r\n\r\n    console.log('Ответ от API:', response.data);\r\n\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Ошибка при загрузке данных с Google Books API:', error);\r\n\r\n    if (error.response) {\r\n      console.error('Ответ от сервера:', error.response.data);\r\n    } else {\r\n      console.error('Ошибка без ответа от сервера:', error.message);\r\n    }\r\n    throw new Error('Не удалось загрузить книги');\r\n  }\r\n};\r\n"],"mappings":"AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B,CAAC,CAAE;AAC9C,MAAMC,OAAO,GAAG,6CAA6C;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,UAAU,KAAK;EACrE,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,WAAWP,OAAO,MAAME,KAAK,YAAYE,IAAI,eAAeC,UAAU,QAAQN,OAAO,EAAE,CAAC;IAEpG,MAAMS,MAAM,GAAG;MACbC,CAAC,EAAEP,KAAK;MACRQ,OAAO,EAAEN,IAAI;MACbC,UAAU,EAAEA,UAAU;MACtBM,UAAU,EAAE,EAAE;MACdC,GAAG,EAAEb;IACP,CAAC;;IAED;IACA,IAAII,QAAQ,KAAK,KAAK,EAAE;MACtBK,MAAM,CAACK,MAAM,GAAGV,QAAQ;IAC1B;IAEA,MAAMW,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAACf,OAAO,EAAE;MAAEQ;IAAO,CAAC,CAAC;IAErDF,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEO,QAAQ,CAACE,IAAI,CAAC;IAE3C,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdX,OAAO,CAACW,KAAK,CAAC,gDAAgD,EAAEA,KAAK,CAAC;IAEtE,IAAIA,KAAK,CAACH,QAAQ,EAAE;MAClBR,OAAO,CAACW,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAACH,QAAQ,CAACE,IAAI,CAAC;IACzD,CAAC,MAAM;MACLV,OAAO,CAACW,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAACC,OAAO,CAAC;IAC/D;IACA,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;EAC/C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}