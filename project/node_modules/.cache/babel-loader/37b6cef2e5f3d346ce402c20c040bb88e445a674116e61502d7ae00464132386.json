{"ast":null,"code":"import axios from 'axios';\nconst API_KEY = 'AIzaSyB-PJvJSqibUZMXVWLz6OYxN6LVXS170hI';\nconst API_URL = 'https://www.googleapis.com/books/v1/volumes';\nexport const fetchBooks = async (query, category, sort, startIndex = 0) => {\n  try {\n    const params = {\n      q: query,\n      // Текст поиска\n      orderBy: sort,\n      // Сортировка\n      startIndex: startIndex,\n      // Пагинация\n      maxResults: 30,\n      // Ограничение по количеству\n      key: API_KEY // Ваш API ключ\n    };\n\n    // Фильтрация по категории через subject\n    if (category !== 'all') {\n      params.q = `${query}+subject:${category}`;\n    }\n    console.log('Запрос к API:', params);\n    const response = await axios.get(API_URL, {\n      params\n    });\n    console.log('Ответ от API:', response.data);\n    return response.data; // Возвращаем данные\n  } catch (error) {\n    console.error('Ошибка при загрузке данных с Google Books API:', error);\n    if (error.response) {\n      console.error('Ответ от сервера с ошибкой:', error.response.data);\n    } else {\n      console.error('Ошибка без ответа от сервера:', error.message);\n    }\n    throw new Error('Не удалось загрузить книги');\n  }\n};\n\n// import axios from 'axios';\n\n// const API_KEY = 'AIzaSyB-PJvJSqibUZMXVWLz6OYxN6LVXS170hI'; \n// const API_URL = 'https://www.googleapis.com/books/v1/volumes';\n\n// export const fetchBooks = async (query, category, sort, startIndex) => {\n//   try {\n//     // Логируем параметры запроса\n//     console.log('Запрос к API:', {\n//       q: query,\n//       orderBy: sort,\n//       startIndex: startIndex,\n//       maxResults: 30,\n//       key: API_KEY,\n//       filter: category !== 'all' ? category : undefined, // Не передаем filter, если категория 'all'\n//     });\n\n//     const params = {\n//       q: query,\n//       orderBy: sort,\n//       startIndex: startIndex,\n//       maxResults: 30,\n//       key: API_KEY,\n//     };\n\n//     if (category !== 'all') {\n//       params.filter = category;  // Добавляем filter, если категория не 'all'\n//     }\n\n//     const response = await axios.get(API_URL, { params });\n\n//     // Логируем успешный ответ\n//     console.log('Ответ от API:', response.data);\n\n//     return response.data;\n//   } catch (error) {\n//     console.error('Ошибка при загрузке данных с Google Books API:', error);\n\n//     // Логируем ошибку\n//     if (error.response) {\n//       console.error('Ответ от сервера с ошибкой:', error.response.data);\n//     } else {\n//       console.error('Ошибка без ответа от сервера:', error.message);\n//     }\n//     throw new Error('Не удалось загрузить книги');\n//   }\n// };","map":{"version":3,"names":["axios","API_KEY","API_URL","fetchBooks","query","category","sort","startIndex","params","q","orderBy","maxResults","key","console","log","response","get","data","error","message","Error"],"sources":["D:/LABS/5-semestr(and_variant)/Veb/src/MODSEN/Project_MODSEN/project/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_KEY = 'AIzaSyB-PJvJSqibUZMXVWLz6OYxN6LVXS170hI'; \r\nconst API_URL = 'https://www.googleapis.com/books/v1/volumes';\r\n\r\nexport const fetchBooks = async (query, category, sort, startIndex = 0) => {\r\n  try {\r\n    const params = {\r\n      q: query, // Текст поиска\r\n      orderBy: sort, // Сортировка\r\n      startIndex: startIndex, // Пагинация\r\n      maxResults: 30, // Ограничение по количеству\r\n      key: API_KEY, // Ваш API ключ\r\n    };\r\n\r\n    // Фильтрация по категории через subject\r\n    if (category !== 'all') {\r\n      params.q = `${query}+subject:${category}`;\r\n    }\r\n\r\n    console.log('Запрос к API:', params);\r\n\r\n    const response = await axios.get(API_URL, { params });\r\n\r\n    console.log('Ответ от API:', response.data);\r\n\r\n    return response.data; // Возвращаем данные\r\n  } catch (error) {\r\n    console.error('Ошибка при загрузке данных с Google Books API:', error);\r\n\r\n    if (error.response) {\r\n      console.error('Ответ от сервера с ошибкой:', error.response.data);\r\n    } else {\r\n      console.error('Ошибка без ответа от сервера:', error.message);\r\n    }\r\n\r\n    throw new Error('Не удалось загрузить книги');\r\n  }\r\n};\r\n\r\n\r\n// import axios from 'axios';\r\n\r\n// const API_KEY = 'AIzaSyB-PJvJSqibUZMXVWLz6OYxN6LVXS170hI'; \r\n// const API_URL = 'https://www.googleapis.com/books/v1/volumes';\r\n\r\n// export const fetchBooks = async (query, category, sort, startIndex) => {\r\n//   try {\r\n//     // Логируем параметры запроса\r\n//     console.log('Запрос к API:', {\r\n//       q: query,\r\n//       orderBy: sort,\r\n//       startIndex: startIndex,\r\n//       maxResults: 30,\r\n//       key: API_KEY,\r\n//       filter: category !== 'all' ? category : undefined, // Не передаем filter, если категория 'all'\r\n//     });\r\n\r\n//     const params = {\r\n//       q: query,\r\n//       orderBy: sort,\r\n//       startIndex: startIndex,\r\n//       maxResults: 30,\r\n//       key: API_KEY,\r\n//     };\r\n\r\n//     if (category !== 'all') {\r\n//       params.filter = category;  // Добавляем filter, если категория не 'all'\r\n//     }\r\n\r\n//     const response = await axios.get(API_URL, { params });\r\n\r\n//     // Логируем успешный ответ\r\n//     console.log('Ответ от API:', response.data);\r\n\r\n//     return response.data;\r\n//   } catch (error) {\r\n//     console.error('Ошибка при загрузке данных с Google Books API:', error);\r\n\r\n//     // Логируем ошибку\r\n//     if (error.response) {\r\n//       console.error('Ответ от сервера с ошибкой:', error.response.data);\r\n//     } else {\r\n//       console.error('Ошибка без ответа от сервера:', error.message);\r\n//     }\r\n//     throw new Error('Не удалось загрузить книги');\r\n//   }\r\n// };\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,yCAAyC;AACzD,MAAMC,OAAO,GAAG,6CAA6C;AAE7D,OAAO,MAAMC,UAAU,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,UAAU,GAAG,CAAC,KAAK;EACzE,IAAI;IACF,MAAMC,MAAM,GAAG;MACbC,CAAC,EAAEL,KAAK;MAAE;MACVM,OAAO,EAAEJ,IAAI;MAAE;MACfC,UAAU,EAAEA,UAAU;MAAE;MACxBI,UAAU,EAAE,EAAE;MAAE;MAChBC,GAAG,EAAEX,OAAO,CAAE;IAChB,CAAC;;IAED;IACA,IAAII,QAAQ,KAAK,KAAK,EAAE;MACtBG,MAAM,CAACC,CAAC,GAAG,GAAGL,KAAK,YAAYC,QAAQ,EAAE;IAC3C;IAEAQ,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEN,MAAM,CAAC;IAEpC,MAAMO,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAG,CAACd,OAAO,EAAE;MAAEM;IAAO,CAAC,CAAC;IAErDK,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEC,QAAQ,CAACE,IAAI,CAAC;IAE3C,OAAOF,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdL,OAAO,CAACK,KAAK,CAAC,gDAAgD,EAAEA,KAAK,CAAC;IAEtE,IAAIA,KAAK,CAACH,QAAQ,EAAE;MAClBF,OAAO,CAACK,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAACH,QAAQ,CAACE,IAAI,CAAC;IACnE,CAAC,MAAM;MACLJ,OAAO,CAACK,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAACC,OAAO,CAAC;IAC/D;IAEA,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;EAC/C;AACF,CAAC;;AAGD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}